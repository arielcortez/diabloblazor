@page "/"

@inject AppState AppState
@inject Interop Interop
@inject Worker Worker
@inject ExceptionHandler ExceptionHandler
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@*@inject IndexedDbManager IndexedDbManager*@

<div id="main" class="App @(AppState.Started ? "started" : "") @(AppState.Dropping > 0 ? "dropping" : "")" @ondragenter="OnMainDragEnter" @ondragleave="OnMainDragLeave">
    <div class="Body">
        <div class="inner">
            @if (!AppState.Error)
            {
                <canvas id="canvas" width="640" height="480" tabindex="1" @onkeydown="OnCanvasKeyDown" @onkeyup="OnCanvasKeyUp"
                        @onmousemove="OnCanvasMouseMove" @onmousedown="OnCanvasMouseDown" @onmouseup="OnCanvasMouseUp" />
            }
        </div>
    </div>
    <div class="BodyV">
        @if (AppState.ShowSaves)
        {
            <div class="start">
                <ul class="saveList">
                    @if (!AppState.Saves.Any())
                    {
                        @:There are no saves.
                    }
                    else
                    {
                        @:Saves:
                        foreach (var save in AppState.Saves)
                        {
                            <li @key="save.Name">
                                <div class="saveName">@save.ShortName</div><span class="info">@save.GameType</span>
                                <i class="btnDownload fa fa-download" @onclick="() => DownloadSave(save.Name)"></i>
                                <i class="btnRemove fa fa-times" @onclick="() => RemoveSave(save)"></i>
                            </li>
                        }
                    }
                </ul>
                <a @ref="downloadLink" class="hidden"></a>
                <label for="saveInput" class="startButton">Upload Save</label>
                <input accept=".sv" type="file" id="saveInput" class="hidden" @onchange="ParseSaveFile" />
                <div class="startButton" @onclick="GoBack">Back</div>
            </div>
        }
        else if (AppState.Loading && !AppState.Started)
        {
            <div class="loading">
                @(AppState.Progress.Message ?? "Initializing...")
                @if (AppState.Progress.Total != 0)
                {
                    <span class="progressBar"><span><span style="width: @ProgressBarWidth%" /></span></span>
                }
            </div>
        }
        else if (!AppState.Started)
        {
            <div class="start">
                <p>
                    Based on the excellent <a href="https://github.com/d07RiV/diabloweb">DiabloWeb</a> which, in turn, is based on the likewise excellent <a href="https://github.com/diasurgical/devilution">Devilution</a>.
                    The project page with information and links can be found here: <a href="https://github.com/n-stefan/diabloblazor">DiabloBlazor</a>.
                </p>
                <p>
                    If you own the original game, you can drop the original DIABDAT.MPQ onto this page or click the button below to start playing.
                    The game can be purchased from <a href="https://www.gog.com/game/diablo">GoG</a>.
                    @*<span class="link" @onclick="CompressMPQ">Click here to compress the MPQ, greatly reducing its size.</span>*@
                </p>
                @if (!AppState.HasSpawn)
                {
                    <p>
                        Or you can play the shareware version for free (25MB download).
                    </p>
                }
                <label for="mpqInput" class="startButton">Browse for DIABDAT.MPQ</label>
                <div class="startButton" @onclick="() => Start()">Play Shareware</div>
                @if (AppState.Saves.Any())
                {
                    <div class="startButton" @onclick="ShowSaves">Manage Saves</div>
                }
                <p>Game render interval (milliseconds): <span class="highlight">@RenderInterval</span></p>
                <p>FPS target: <span class="highlight">@FPSTarget</span></p>
                <p><input type="range" min="15" max="100" step="1" @bind="RenderInterval" @bind:event="oninput" @onchange="OnRenderIntervalChange" /></p>
            </div>
        }
        <input accept=".mpq" type="file" id="mpqInput" class="hidden" @onchange="ParseMpqFile" />
    </div>
</div>

@code
{
    //TODO: Move some into AppState
    private static readonly int[] spawnFilesizes = { 50_274_091, 25_830_791 };
    private const string spawnFilename = "spawn.mpq";
    private const string retailFilename = "diabdat.mpq";
    private string? saveName;
    private bool isDrop;
    private ClientRect canvasRect;
    private ElementReference downloadLink;
    //private Dictionary<string, byte[]> fileSystem;

    public bool Offscreen { get; private set; }
    public int RenderInterval { get; private set; }
    public Configuration Configuration { get; private set; }
    public GameType GameType { get; private set; }
    public Timer? Timer { private get; set; }
    public GCHandle GameWasmHandle { private get; set; }

    private string FPSTarget =>
        (RenderInterval != 0) ? (1000.0 / RenderInterval).ToString("N2") : "0";

    private (double x, double y) MousePos(MouseEventArgs e)
    {
        double tx = 0, ty = 0;
        tx = Max(canvasRect.Left, Min(canvasRect.Right, tx + e.ClientX));
        ty = Max(canvasRect.Top, Min(canvasRect.Bottom, ty + e.ClientY));
        return (
            x: Max(0, Min(Round((tx - canvasRect.Left) / (canvasRect.Right - canvasRect.Left) * 640), 639)),
            y: Max(0, Min(Round((ty - canvasRect.Top) / (canvasRect.Bottom - canvasRect.Top) * 480), 479))
        );
    }

    private int MouseButton(MouseEventArgs e) =>
        e.Button switch
        {
            0 => 1,
            1 => 4,
            2 => 2,
            3 => 5,
            4 => 6,
            _ => 1
        };

    private int EventModifiers(EventArgs e)
    {
        //A common base class with at least ShiftKey, CtrlKey and AltKey would be nice
        if (e is MouseEventArgs me)
            return ((me.ShiftKey /*|| this.touchMods[TOUCH_SHIFT]*/) ? 1 : 0) + (me.CtrlKey ? 2 : 0) + (me.AltKey ? 4 : 0) /*+ (e.touches ? 8 : 0)*/;
        else if (e is KeyboardEventArgs ke)
            return ((ke.ShiftKey /*|| this.touchMods[TOUCH_SHIFT]*/) ? 1 : 0) + (ke.CtrlKey ? 2 : 0) + (ke.AltKey ? 4 : 0) /*+ (e.touches ? 8 : 0)*/;
        else
            throw new Exception($"Parameter '{nameof(e)}' must be of type MouseEventArgs or KeyboardEventArgs!");
    }

    private int GetKeyCode(KeyboardEventArgs e) =>
        e.Code switch
        {
            string s when s.StartsWith("F") => int.Parse(s[1..]) + 111,
            string s when s.StartsWith("Key") => (int)s[^1] - 32,
            string s when s.StartsWith("Digit") => (int)s[^1] + 48,
            string s when s.StartsWith("Shift") => 16,
            "Backspace" => 8,
            "Tab" => 9,
            "Enter" => 13,
            "Escape" => 27,
            "Space" => 32,
            "ArrowLeft" => 37,
            "ArrowUp" => 38,
            "ArrowRight" => 39,
            "ArrowDown" => 40,
            "Equal" => 187,
            "Minus" => 189,
            _ => -1
        };

    protected override async Task OnInitializedAsync()
    {
        Configuration = await HttpClient.GetJsonAsync<Configuration>($"{NavigationManager.BaseUri}dist/appconfig.json");

        RenderInterval = await Interop.GetRenderInterval();

        await InitFileSystem();

        if (await Interop.HasFile(spawnFilename, spawnFilesizes))
            AppState.HasSpawn = true;

        await InitSaves();

        canvasRect = await Interop.GetCanvasRect();

        ExceptionHandler.OnException += (_, message) => Interop.Alert($"An error has occured: {message}");

        await Interop.AddEventListeners();

        await Interop.StoreDotNetReference(DotNetObjectReference.Create<Main>(this));
    }

    private async Task OnRenderIntervalChange(ChangeEventArgs e) =>
        await Interop.SetRenderInterval(RenderInterval);

    private void OnCanvasMouseMove(MouseEventArgs e)
    {
        var (x, y) = MousePos(e);
        Interop.DApiMouse(0, 0, EventModifiers(e), x, y);
    }

    private void OnCanvasMouseDown(MouseEventArgs e)
    {
        var (x, y) = MousePos(e);
        Interop.DApiMouse(1, MouseButton(e), EventModifiers(e), x, y);
    }

    private void OnCanvasMouseUp(MouseEventArgs e)
    {
        var (x, y) = MousePos(e);
        Interop.DApiMouse(2, MouseButton(e), EventModifiers(e), x, y);
    }

    private async Task OnCanvasKeyDown(KeyboardEventArgs e)
    {
        var keyCode = GetKeyCode(e);

        if (keyCode == -1)
            return;

        await Interop.DApiKey(0, EventModifiers(e), keyCode);

        if (keyCode >= 32 && e.Key.Length == 1)
            await Interop.DApiChar((int)e.Key[0]);
        else if (/*keyCode == 8 ||*/ keyCode == 13)
            await Interop.DApiChar(keyCode);
    }

    private async Task OnCanvasKeyUp(KeyboardEventArgs e) =>
        await Interop.DApiKey(1, EventModifiers(e), GetKeyCode(e));

    private void OnMainDragEnter(DragEventArgs e) =>
        SetDropping(1);

    private void OnMainDragLeave(DragEventArgs e) =>
        SetDropping(-1);

    private void SetDropping(int change) =>
        AppState.Dropping = Max(AppState.Dropping + change, 0);

    private ValueTask InitFileSystem()
    {
        //var store = await IndexedDbManager.GetRecords<IndexedDbFile>("kv");
        //return store.ToDictionary(x => x.Name, x => x.Data);

        return Interop.InitIndexedDb();
    }

    private async Task InitSaves()
    {
        var filenames = await Interop.GetFilenames();
        var saveNames = filenames.Where(x => x.EndsWith(".sv")).ToList();
        saveNames.ForEach(x => AppState.Saves.Add(new SaveGame(x)));
    }

    private void CompressMPQ() =>
        AppState.Compress = true;

    private string ExtractFilename(string path)
    {
        //Path.GetFileName doesn't seem to do the trick
        var index = path.LastIndexOf(@"\");
        return (index != -1) ? path[(index + 1)..] : path;
    }

    private async Task ParseSaveFile(ChangeEventArgs e)
    {
        var name = ExtractFilename(e.Value.ToString()).ToLower();
        await Upload(name);
    }

    private async Task Upload(string name)
    {
        if (name is null)
            throw new ArgumentNullException(nameof(name));

        if (!name.EndsWith(".sv"))
        {
            Interop.Alert("Please select an SV file.");
            return;
        }

        if (await Interop.IndexedDbHasFile(name))
        {
            Interop.Alert($"Save '{name}' already exists.");
            return;
        }

        await Interop.UploadFile();
        AppState.Saves.Add(new SaveGame(name));
    }

    private async Task ParseMpqFile(ChangeEventArgs e)
    {
        var name = ExtractFilename(e.Value.ToString()).ToLower();
        await Start(name);
    }

    private void GoBack() =>
        AppState.ShowSaves = false;

    private async Task DownloadSave(string name)
    {
        var data = await Interop.ReadIndexedDbAsBase64String(name);
        await Interop.ClickDownloadLink(downloadLink, name, $"data:application/octet-stream;base64,{data}");
        //await Interop.DownloadFile(name);
    }

    private async Task RemoveSave(SaveGame saveGame)
    {
        if (!Interop.Confirm($"Are you sure you want to delete {saveGame.ShortName}?"))
            return;

        await Interop.RemoveFile(saveGame.Name);
        var saveToRemove = AppState.Saves.FirstOrDefault(x => x.Name == saveGame.Name);
        AppState.Saves.Remove(saveToRemove);
    }

    private void ShowSaves() =>
        AppState.ShowSaves = !AppState.ShowSaves;

    private async Task LoadGame()
    {
        await Interop.InitGraphics(Offscreen);
        await Interop.InitSound();
        await DoLoadGame();
    }

    private async Task DoLoadGame()
    {
        if (GameType == GameType.Retail)
            await LoadRetail();
        else
            await LoadSpawn();

        await Worker.InitGame(this);
    }

    private async Task LoadRetail()
    {
        if (!await Interop.HasFile(retailFilename))
            if (isDrop)
                await Interop.SetDropFile();
            else
                await Interop.SetInputFile();
    }

    private async Task LoadSpawn()
    {
        var filesize = await Interop.GetFilesize(spawnFilename);
        if (filesize != 0 && !spawnFilesizes.Contains(filesize))
        {
            //await IndexedDbManager.DeleteRecord<string>("kv", spawnFilename);

            await Interop.RemoveFile(spawnFilename);
            filesize = 0;
        }
        if (filesize == 0)
        {
            //HttpClient.DefaultRequestHeaders.Add("Cache-Control", "max-age=31536000");
            var url = $"{NavigationManager.BaseUri}{spawnFilename}";
            //var spawn = await HttpClient.GetByteArrayAsync(url);

            //fileSystem[spawnFilename] = spawn;

            //var indexedDBFile = new IndexedDbFile { Name = spawnFilename, Data = spawn };
            //var storeRecord = new StoreRecord<IndexedDbFile> { Storename = "kv", Data = indexedDBFile };
            //await IndexedDbManager.UpdateRecord<IndexedDbFile>(storeRecord);

            //TODO: When serialization is fast enough
            //await Interop.UpdateIndexedDb(spawnFilename, spawn);

            filesize = await Interop.DownloadAndUpdateIndexedDb(url, spawnFilename, spawnFilesizes);

            if (!spawnFilesizes.Contains(filesize))
                throw new Exception("Invalid spawn.mpq size. Try clearing the cache and refreshing the page.");
        }
    }

    private double ProgressBarWidth =>
        AppState.Progress.Total != 0 ? Round(100d * AppState.Progress.Loaded / AppState.Progress.Total) : 100d;

    [JSInvokable]
    public async Task Start(string? name = null, bool isDrop = false)
    {
        //if (this.compressMpq)
        //    this.compressMpq.start(file);

        if (name != null && !name.EndsWith(".mpq"))
        {
            Interop.Alert("Please select an MPQ file. If you downloaded the installer from GoG, you will need to install it on PC and use the MPQ file from the installation folder.");
            AppState.Dropping = 0;
            StateHasChanged();
            return;
        }

        GameType = (name != null && name == retailFilename) ? GameType.Retail : GameType.Shareware;

        this.isDrop = isDrop;
        AppState.Dropping = 0;
        AppState.Loading = true;

        await LoadGame();

        //document.addEventListener('touchstart', this.onTouchStart, { passive: false, capture: true});
        //document.addEventListener('touchmove', this.onTouchMove, { passive: false, capture: true});
        //document.addEventListener('touchend', this.onTouchEnd, { passive: false, capture: true});

        this.isDrop = false;
        AppState.Started = true;

        StateHasChanged();
    }

    [JSInvokable]
    public void SetCursorPos(double x, double y) =>
        Interop.DApiMouse(0, 0, 0, x, y);

    [JSInvokable]
    public void SetSaveName(int id) =>
        saveName = (id >= 0) ? (GameType == GameType.Shareware) ? $"spawn{id}.sv" : $"single_{id}.sv" : null;

    [JSInvokable]
    public void OnResize(ClientRect rect) =>
        canvasRect = rect;

    [JSInvokable]
    public void OnProgress(Progress progress)
    {
        AppState.Progress = progress;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnExit()
    {
        if (AppState.Error)
            return;

        Timer?.Dispose();
        Timer = null;

        GameWasmHandle.Free();

        await Interop.Reload();
    }

    [JSInvokable]
    public async Task InitWebAssemblyUnmarshalledEnd() =>
        await Worker.InitWebAssemblyUnmarshalledEnd(this);
}
